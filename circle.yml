version: 2
jobs:
  build:
    steps:
      - checkout

      - run:
          name: Waiting for Postgres to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgress && exit 1
      - run: mkdir -p $TEST_RESULTS

      - run:
          name: Run unit tests
          environment:
            DATABASE_URL: "postgres://ubuntu@localhost:5432/contacts?sslmode=disable"
            DB_MIGRATIONS: /go/src/github.com/circleci/cci-demo-docker/db/migrations
          command: |
            set -ou pipefail
            trap "go-junit-report <${TEST_RESULTS}/go-test.out > ${TEST_RESULTS}/go-test-report.xml" EXIT
            # Notice this `set -o pipefail`, this will cause script to fail if `make test` fails
            # without this option script will return success regardless of testing result due to pipe after test command
            make test | tee ${TEST_RESULTS}/go-test.out
      - setup_remote_docker

      # This should go into custom primary image, here's only for the sake of explanation
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin
      # This should go into custom primary image, here's only for the sake of explanation
      - run:
          name: Install Docker Compose
          command: |
            set -x
            curl -L https://github.com/docker/compose/releases/download/1.11.2/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            
machine:
  timezone: Europe/Vienna
  java:
    version: openjdk8
  services:
  - docker
  environment:
    DB_NAME: executive
    DB_USER: root
    DB_PASSWORD: root
    EXECUTIVE_DATASOURCE_URL: jdbc:postgresql://localhost:5432/$DB_NAME
    EXECUTIVE_DATASOURCE_USERNAME: $DB_USER
    EXECUTIVE_DATASOURCE_PASSWORD: $DB_PASSWORD
  pre:
  #- DEBIAN_FRONTEND=noninteractive sudo apt-get --purge autoremove -y postgresql
dependencies:
  pre:
    #- sudo service postgresql stop
    - cd kafka
    - docker-compose -d up
    - cd ..
        
test:
  pre:
  #- docker run --name test-postgres -d -p 5432:5432 -e POSTGRES_USER=$DB_USER -e POSTGRES_PASSWORD=$DB_PASSWORD -e POSTGRES_DB=$DB_NAME postgres
  
  override:
    #- mvn test -f discoveryserver/pom.xml
    #- mvn test -f configserver/pom.xml
    #- mvn test -f adminui/pom.xml
    #- mvn test -f microservicesdashboard/pom.xml
    #- mvn test -f menu/pom.xml
    #- mvn test -f cook/pom.xml
    - mvn test -f waiter/pom.xml